<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <DefaultFaultRule name="generic_fault_handler">
        <Step>
            <Name>HPX_Fault_GenericFault</Name>
        </Step>
        <!-- <AlwaysEnforce>true</AlwaysEnforce> -->
    </DefaultFaultRule>
    <DefaultFaultRule name="set_log_data">
        <Step>
            <Name>HPX_SetLogsData</Name>
        </Step>
        <AlwaysEnforce>true</AlwaysEnforce>
    </DefaultFaultRule>
    <FaultRules>
        <!-- This fault occurs when host(not listed in AccessControl policy) try to request. -->
        <FaultRule name="access_forbidden">
            <Step>
                <Name>HPX_Fault_AccessControl</Name>
            </Step>
            <Condition>fault.name = "IPDeniedAccess"</Condition>
        </FaultRule>
        <!-- This fault occurs when request does not match with any flow. -->
        <FaultRule name="bad_request">
            <Step>
                <Name>HPX_Fault_BadRequest</Name>
            </Step>
            <Condition>fault.name = "RaiseFault"</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called to handle invalid data(JSON/XML) in PUT and POST requests.-->
        <FaultRule name="json_xml_threat">
            <Step>
                <Name>HPX_Fault_InvalidPayload</Name>
            </Step>
            <Condition>(fault.name = "ExceededContainerDepth") or (fault.name = "ExceededObjectEntryCount") or 
              (fault.name = "ExceededArrayElementCount") or (fault.name = "ExceededObjectEntryNameLength") or 
              (fault.name = "ExceededStringValueLength") or (fault.name = "SourceUnavailable") or 
              (fault.name = "NonMessageVariable") or (fault.name = "ExecutionFailed") or (fault.name = "NodeDepthExceeded") or (fault.name = "AttrCountExceeded") or (fault.name = "ChildCountExceeded") or (fault.name = "NSCountExceeded") or (fault.name = "ElemNameExceeded") or (fault.name = "AttrNameExceeded") or (fault.name = "AttrValueExceeded") or (fault.name = "NSPrefixExceeded") or (fault.name = "NSURIExceeded")</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called when there is some error in javascript.-->
        <FaultRule name="js_error">
            <Step>
                <Name>HPX_Fault_JSError</Name>
            </Step>
            <Condition>(JS_Error = true)</Condition>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <!-- This policy allow access to only listed hosts. -->
            <Step>
                <Name>HPX_AccessControl</Name>
            </Step>
            <!-- This AssignMessage Policy is used to set target basepath.-->
            <Step>
                <Name>HPX_SetTargetBasepath</Name>
            </Step>
            <!--This AssignMessage policy initialize required variable in flow. -->
            <Step>
                <Name>HPX_InitialConfiguration_JS</Name>
            </Step>
            <!-- This AssignMessage policy sets returnType equal to Accept header's value.-->
            <Step>
                <Name>HPX_SetReturnType</Name>
            </Step>
            
        </Request>
        <Response/>
    </PreFlow>
    <Flows>
        <Flow name="fetch_complete_record">
            <Description/>
            <Request/>
            <Response/>
            <Condition>request.verb = "GET" and ((path MatchesPath "/*/$everything" and (primaryResource= "Encounter" or primaryResource= "Patient")) or (path MatchesPath "/$everything" and (primaryResource= "Patient")))</Condition>
        </Flow>
        <Flow name="fetch_pagination_data">
            <Description/>
            <Request/>
            <Response/>
            <Condition>((request.verb = "GET") and (request.queryparam.stateid != null and request.queryparam.stateid != "" ))		</Condition>
        </Flow>
        <Flow name="resource_search">
            <Description/>
            <Request>
                <!-- This policy sets patient_id in queryparam. -->
                <Step>
                    <Name>HPX_SetPatientId</Name>
                    <Condition>request.header.patient!=null and request.header.patient!="" and !(primaryResource= "Coverage" or primaryResource= "Practitioner" or primaryResource= "Patient" or primaryResource= "Schedule")</Condition>
                </Step>
                <!-- This policy sets patient_id in _id queryparam for Patient resource. -->
                <Step>
                    <Name>HPX_SetPatientIdForPatient</Name>
                    <Condition>request.header.patient!=null and request.header.patient!="" and primaryResource= "Patient"</Condition>
                </Step>
                <!-- This policy sets patient_id in actor queryparam for Schedule resource. -->
                <Step>
                    <Name>HPX_SetPatientIdForSchedule</Name>
                    <Condition>request.header.patient!=null and request.header.patient!="" and primaryResource= "Schedule"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "GET") and (path ~~ "(/?)$") and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_search_post">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "POST" ) and (path MatchesPath "/_search") and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_tag">
            <Description>it gives the tags related to particular resource</Description>
            <Request/>
            <Response/>
            <Condition>(request.verb = "GET") and ((path MatchesPath "/$meta") or ((path MatchesPath "/*/$meta") or (path MatchesPath "/*/_history/*/$meta") and (isBasePath == false)))</Condition>
        </Flow>
        <Flow name="resource_history">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "GET") and ((path MatchesPath "/_history") or ((path MatchesPath "/*/_history") and (isBasePath == false)))</Condition>
        </Flow>
        <Flow name="composition">
            <Description/>
            <Request/>
            <Response/>
            <Condition>((path MatchesPath "/Composition") or (path MatchesPath "/Composition/*")) and (request.verb = "GET") and (isBasePath == true)</Condition>
        </Flow>
        <Flow name="binary_read">
            <Description/>
            <Request/>
            <Response/>
            <Condition>((path MatchesPath "/Binary") or (path MatchesPath "/Binary/*") or (path MatchesPath "/Binary/*/_history/*")) and (request.verb = "GET") and (isBasePath == true)</Condition>
        </Flow>
        <Flow name="resource_read">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "GET") and (path MatchesPath "/*") and (request.queryparams.count == 0) and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_vread">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "GET") and (path MatchesPath "/*/_history/*") and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_compartment_search">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "GET") and (path MatchesPath "/*/*") and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_update">
            <Description/>
            <Request>
                <!-- This XMLThreatProtection policy checks if XML data sent in request satisfies certain parameters such as: NameLimits,
				StructureLimits, ValueLimits, Source etc.  -->
                <Step>
                    <Name>HPX_CheckXMLThreat</Name>
                    <Condition>request.header.Content-Type="application/xml"</Condition>
                </Step>
                <!-- This JSONThreatProtection policy checks if json data sent in request satisfies certain parameters such as: ArrayElementCount, 
				ContainerDepth, ObjectEntryCount, ObjectEntryNameLength, Source, StringValueLength  .-->
                <Step>
                    <Name>HPX_CheckJSONThreat</Name>
                    <Condition>request.header.Content-Type="application/json"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "PUT") and (((path MatchesPath "/*") and (request.queryparams.count == 0) and (isBasePath == false)) or ((path MatchesPath "/Binary/*") and (isBasePath == true)))</Condition>
        </Flow>
        <Flow name="resource_conditional_update">
            <Description/>
            <Request>
                <!-- This XMLThreatProtection policy checks if XML data sent in request satisfies certain parameters such as: NameLimits,
				StructureLimits, ValueLimits, Source etc.  -->
                <Step>
                    <Name>HPX_CheckXMLThreat</Name>
                    <Condition>request.header.Content-Type="application/xml"</Condition>
                </Step>
                <!-- This JSONThreatProtection policy checks if json data sent in request satisfies certain parameters such as: ArrayElementCount, 
				ContainerDepth, ObjectEntryCount, ObjectEntryNameLength, Source, StringValueLength  .-->
                <Step>
                    <Name>HPX_CheckJSONThreat</Name>
                    <Condition>request.header.Content-Type="application/json"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "PUT") and (path MatchesPath "/") and (request.queryparams.count > 0) and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_delete">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "DELETE") and (path MatchesPath "/*") and (request.queryparams.count == 0) and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_conditional_delete">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(request.verb = "DELETE") and (path MatchesPath "/") and (request.queryparams.count > 0) and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_conditional_create">
            <Description/>
            <Request>
                <!-- This XMLThreatProtection policy checks if XML data sent in request satisfies certain parameters such as: NameLimits,
				StructureLimits, ValueLimits, Source etc.  -->
                <Step>
                    <Name>HPX_CheckXMLThreat</Name>
                    <Condition>request.header.Content-Type="application/xml"</Condition>
                </Step>
                <!-- This JSONThreatProtection policy checks if json data sent in request satisfies certain parameters such as: ArrayElementCount, 
				ContainerDepth, ObjectEntryCount, ObjectEntryNameLength, Source, StringValueLength  .-->
                <Step>
                    <Name>HPX_CheckJSONThreat</Name>
                    <Condition>request.header.Content-Type="application/json"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "POST") and (path MatchesPath "/") and (request.header.If-None-Exist!=null and request.header.If-None-Exist!="" ) and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="resource_create">
            <Description/>
            <Request>
                <!-- This XMLThreatProtection policy checks if XML data sent in request satisfies certain parameters such as: NameLimits,
				StructureLimits, ValueLimits, Source etc.  -->
                <Step>
                    <Name>HPX_CheckXMLThreat</Name>
                    <Condition>request.header.Content-Type="application/xml"</Condition>
                </Step>
                <!-- This JSONThreatProtection policy checks if json data sent in request satisfies certain parameters such as: ArrayElementCount, 
				ContainerDepth, ObjectEntryCount, ObjectEntryNameLength, Source, StringValueLength  .-->
                <Step>
                    <Name>HPX_CheckJSONThreat</Name>
                    <Condition>request.header.Content-Type="application/json"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "POST") and (((path MatchesPath "/" ) and (request.queryparams.count == 0) and (isBasePath == false)) or ((isBasePath == true) and (path MatchesPath "/Binary")))</Condition>
        </Flow>
        <Flow name="resource_meta">
            <Description/>
            <Request>
                <!-- This XMLThreatProtection policy checks if XML data sent in request satisfies certain parameters such as: NameLimits,
			StructureLimits, ValueLimits, Source etc.  -->
                <Step>
                    <Name>HPX_CheckXMLThreat</Name>
                    <Condition>request.header.Content-Type="application/xml"</Condition>
                </Step>
                <!-- This JSONThreatProtection policy checks if json data sent in request satisfies certain parameters such as: ArrayElementCount, 
			ContainerDepth, ObjectEntryCount, ObjectEntryNameLength, Source, StringValueLength  .-->
                <Step>
                    <Name>HPX_CheckJSONThreat</Name>
                    <Condition>request.header.Content-Type="application/json"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(request.verb = "POST") and ((path MatchesPath "/*/$meta-add" ) or (path MatchesPath "/*/_history/*/$meta-add" )) and (request.queryparams.count == 0) and (isBasePath == false)</Condition>
        </Flow>
        <Flow name="transaction">
            <Description/>
            <Request>
                <!-- This XMLThreatProtection policy checks if XML data sent in request satisfies certain parameters such as: NameLimits,
			    StructureLimits, ValueLimits, Source etc.  -->
                <Step>
                    <Name>HPX_CheckXMLThreat</Name>
                    <Condition>request.header.Content-Type="application/xml"</Condition>
                </Step>
                <!-- This JSONThreatProtection policy checks if json data sent in request satisfies certain parameters such as: ArrayElementCount, 
			    ContainerDepth, ObjectEntryCount, ObjectEntryNameLength, Source, StringValueLength  .-->
                <Step>
                    <Name>HPX_CheckJSONThreat</Name>
                    <Condition>request.header.Content-Type="application/json"</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(path MatchesPath "/") and (request.verb = "POST") and (isBasePath == true)</Condition>
        </Flow>
        <Flow name="default">
            <!-- Need logic to determine if it's an invalid resource, bad parameter, etc. -->
            <Description/>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>HPX_RaiseFault_Generic</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <!-- This AssignMessage policy sets  'Content-Type' header to 'application/json;charset=UTF-8' if server does not set it.-->
            <Step>
                <Name>HPX_SetResponseContentTypeToJSON</Name>
                <Condition>(response.header.Content-Type=null) and (returnType=null or returnType=="" or !((returnType=="application/xml") or (returnType=="xml") or (returnType=="application/xml+fhir") or (returnType=="text/xml") or  (returnType=="application/xml;charset=UTF-8") or (returnType=="xml;charset=UTF-8") or(returnType=="application/xml+fhir;charset=UTF-8") or (returnType=="text/xml;charset=UTF-8"))) and (response.content!=null and response.content!="" ) and !((path MatchesPath "/Binary/*") or (path MatchesPath "/Binary/*/_history/*"))</Condition>
            </Step>
            <!-- This AssignMessage policy sets  'Content-Type' header to 'application/xml;charset=UTF-8' if server does not set it.-->
            <Step>
                <Name>HPX_SetResponseContentTypeToXML</Name>
                <Condition>(response.header.Content-Type=null) and ((returnType=="application/xml") or (returnType=="xml") or (returnType=="application/xml+fhir") or (returnType=="text/xml") or  (returnType=="application/xml;charset=UTF-8") or (returnType=="xml;charset=UTF-8") or(returnType=="application/xml+fhir;charset=UTF-8") or (returnType=="text/xml;charset=UTF-8")) and (response.content!=null and response.content!="" ) and !((path MatchesPath "/Binary/*") or (path MatchesPath "/Binary/*/_history/*"))</Condition>
            </Step>
            <!-- This JavaScriptCallout policy replaces the server specific URLS with proxy URL.-->
            <Step>
                <Name>HPX_ReplaceTargetLinkURLs</Name>
                <Condition>response.status.code==200 or response.status.code == 201</Condition>
            </Step>
            <!-- This AssignMessage policy sets final 'proxyResponse' to paylaod.-->
            <Step>
                <Name>HPX_AssignProxyResponse</Name>
                <Condition>response.status.code==200 or response.status.code == 201</Condition>
            </Step>
            <!-- This JavaScriptCallout policy sets Content-Length header, if it is not already sent by the server.-->
            <Step>
                <Name>HPX_SetContentLength</Name>
                <Condition>(response.header.Transfer-Encoding = null) and (returnType != null) and (response.content!=null and response.content!="" )</Condition>
            </Step>
            <Step>
                <Name>HPX_SetLogsData</Name>
            </Step>
        </Response>
    </PostFlow>
    <PostClientFlow>
        <Request/>
        <Response>
            <Step>
                <Name>HPX_LogMessage</Name>
            </Step>
        </Response>
    </PostClientFlow>
    <HTTPProxyConnection>
        <BasePath>/hapi-dstu2</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>