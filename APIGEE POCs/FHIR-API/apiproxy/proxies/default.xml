<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <DefaultFaultRule name="generic_fault_handler">
        <Step>
            <Name>HPX_Fault_GenericFault</Name>
        </Step>
        <Step>
            <Name>HPX_CORSSupport</Name>
        </Step>
        <!-- <AlwaysEnforce>true</AlwaysEnforce> -->
    </DefaultFaultRule>
    <DefaultFaultRule name="set_log_data">
        <Step>
            <Name>HPX_SetLogsData</Name>
        </Step>
        <AlwaysEnforce>true</AlwaysEnforce>
    </DefaultFaultRule>
    <FaultRules>
        <!-- This will excute if there is no response from server.. -->
        <FaultRule name="no_response">
            <Step>
                <Name>HPX_Fault_NoResponse</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(invokeConnectorAPIResponse == null) and (((request.verb!="OPTIONS") and (isBasePath == false)) or (isBasePath == true)) and (fault.name = "RaiseFault")</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called to handle invalid data in PUT and POST requests.-->
        <FaultRule name="json_threat">
            <Step>
                <Name>HPX_Fault_InvalidPayload</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "ExceededContainerDepth") or (fault.name = "ExceededObjectEntryCount") or 
              (fault.name = "ExceededArrayElementCount") or (fault.name = "ExceededObjectEntryNameLength") or 
              (fault.name = "ExceededStringValueLength") or (fault.name = "SourceUnavailable") or 
              (fault.name = "NonMessageVariable") or (fault.name = "ExecutionFailed")</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called to handle SQLInjection threats. This policy checks for patterns and URL's of query params. -->
        <FaultRule name="regex_threat">
            <Step>
                <Name>HPX_Fault_RegexThreat</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "ThreatDetected") or (threatPresent = true)</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called when the number of request messages that  is allowed to submit to this API over the course of an hour, 
		day, week, or month exceeds its desired limit. -->
        <FaultRule name="quota_violation">
            <Step>
                <Name>HPX_Fault_QuotaViolation</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "QuotaViolation") or (fault.name = "SpikeArrestViolation")</Condition>
        </FaultRule>
        <!-- This AssignMessagePolicy will execute when unsupported methods are called on resource. -->
        <FaultRule name="unsupported_operation">
            <Step>
                <Name>HPX_Fault_UnsupportedOperation</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "RaiseFault") and (request.verb!="GET" and request.verb!="POST" and request.verb!="PUT" and request.verb!="DELETE" and request.verb!="OPTIONS")</Condition>
        </FaultRule>
        <!-- This AssignMessagePolicy will execute when access token with insufficient scope is used. -->
        <FaultRule name="insufficient_scope">
            <Step>
                <Name>HPX_Fault_InsufficientScope</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "RaiseFault") and (validScopeFound != true)</Condition>
        </FaultRule>
        <!-- This AssignMessagePolicy will execute when invalid resource is requested. -->
        <FaultRule name="bad_request">
            <Step>
                <Name>HPX_Fault_BadRequest</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "RaiseFault") and (isValidFhirResource == false)</Condition>
        </FaultRule>
        <!-- This AssignMessagePolicy will execute when unsupported resource is requested. -->
        <FaultRule name="unsupported_resource">
            <Step>
                <Name>HPX_Fault_UnsupportedResource</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "RaiseFault") and (isValidFhirResource == true) and (isAllowedResource == false)</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called when there is an unauthorized access to this API:	Reason -> API is NOT added to Products. -->
        <FaultRule name="invalid_key_rule">
            <Step>
                <Name>HPX_Fault_InvalidCredentials</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "InvalidAPICallAsNoApiProductMatchFound")</Condition>
        </FaultRule>
        <!-- This RaiseFault policy is called when there is an unauthorized access to this API: 
		Reason -> API is called using invalid token. -->
        <FaultRule name="invalid_access_token_rule">
            <Step>
                <Name>HPX_Fault_InvalidCredentials</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(fault.name = "InvalidAccessToken") Or (fault.name = "access_token_expired") Or (fault.name = "invalid_access_token") Or (fault.name = "InsufficientScope")</Condition>
        </FaultRule>
        <!-- This AssignMessage policy is called to handle javascript exceptions.-->
        <FaultRule name="js_error">
            <Step>
                <Name>HPX_Fault_JSError</Name>
            </Step>
            <Step>
                <Name>HPX_CORSSupport</Name>
            </Step>
            <Condition>(JS_Error = true)</Condition>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <!-- This policy used to return access control headers for cross-origin preflight requests.-->
            <Step>
                <Name>HPX_CORSPreflight</Name>
                <Condition>((request.header.Access-Control-Request-Method != null) and (request.header.Access-Control-Request-Method != "")) and (request.verb =="OPTIONS")</Condition>
            </Step>
            <!-- This OAuthV2 policy checks for the Scope of token and verifies it.-->
            <Step>
                <Name>HPX_VerifyAccessToken</Name>
                <Condition>!(((request.header.Access-Control-Request-Method != null) and (request.header.Access-Control-Request-Method != "")) and (request.verb =="OPTIONS"))</Condition>
            </Step>
            <!-- This KVM policy is used to fetch emrprofiles from Key Value Map. -->
            <Step>
                <Name>HPX_FetchEmrDetails</Name>
            </Step>
            <!-- This AssignMessagePolicy is to set connector domain and basepath. -->
            <Step>
                <Name>HPX_SetConnector</Name>
            </Step>
            <!-- This JS callout is used to set initial parameters. -->
            <Step>
                <Name>HPX_InitialConfiguration_JS</Name>
            </Step>
            <!-- This AssignMessagePolicy will execute when unsupported methods are called on resource. -->
            <Step>
                <Name>HPX_RaiseFault_Generic</Name>
                <Condition>(request.verb!="GET" and request.verb!="POST" and request.verb!="PUT" and request.verb!="DELETE" and request.verb!="OPTIONS") or (validScopeFound != true) or (isAllowedResource != true)</Condition>
            </Step>
            <!-- This SpikeArrest policy sets the rate limit for this API.-->
            <Step>
                <Name>HPX_EnforceRateLimit</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This Quota policy sets the interval, time unit and quota for this API.-->
            <Step>
                <Name>HPX_EnforceQuota</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This RegularExpressionProtection policy ensures that URL  doesn't contain "delete, exec, shutdown, insert, drop table update".-->
            <Step>
                <Name>HPX_CheckURIParamRegex</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This RegularExpressionProtection policy ensures that payload  doesn't contain "delete, exec, shutdown, insert, drop table update".-->
            <Step>
                <Name>HPX_CheckPayloadRegex</Name>
                <Condition>!(((proxy.pathsuffix MatchesPath "/") and (request.verb = "POST") and (isBasePath == true)) or (request.verb = "GET") or (request.verb = "OPTIONS"))</Condition>
            </Step>
            <!-- This JavaScript policy calls a javascript resource file that ensures that query parameters doesn't contain "delete, exec, shutdown, insert, drop table update"..-->
            <Step>
                <Name>HPX_CheckQueryParamRegex</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This RaiseFault policy is called when there are SQLInjection threats. This policy checks for patterns and URL's of query params. -->
            <Step>
                <Name>HPX_RaiseFault_Generic</Name>
                <Condition>(threatPresent = true) and (isPreflight == false)</Condition>
            </Step>
            <!-- This AssignMessage policy extracts various attributes of access token and assigns it to variables.-->
            <Step>
                <Name>HPX_ExtractTokenAttributes</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This LookupCache policy looks for email id of developer in cache.-->
            <Step>
                <FaultRules/>
                <Name>HPX_GetDeveloperFromCache</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This ExtractVariable policy extracts the developer info from developer cache.-->
            <Step>
                <FaultRules/>
                <Name>HPX_ExtractDeveloperInfoFromDeveloperCache</Name>
                <Condition>(lookupcache.GetDeveloperFromCache.cachehit is true) and (isPreflight == false)</Condition>
            </Step>
            <!-- This AccessEntity policy sets the email Id of the developer for this API. 
			This will be called if developer info is not found from cache.-->
            <Step>
                <FaultRules/>
                <Name>HPX_GetDeveloperInfo</Name>
                <Condition>(lookupcache.GetDeveloperFromCache.cachehit is false) and (isPreflight == false)</Condition>
            </Step>
            <!-- This PopulateCache policy adds the developer info to cache. 
			This will be called if developer info is not found from cache.-->
            <Step>
                <FaultRules/>
                <Name>HPX_AddDeveloperToCache</Name>
                <Condition>(lookupcache.GetDeveloperFromCache.cachehit is false) and (isPreflight == false)</Condition>
            </Step>
            <!-- This ExtractVariable policy extracts the developer info.-->
            <Step>
                <FaultRules/>
                <Name>HPX_ExtractDeveloperInfoFromDeveloper</Name>
                <Condition>(lookupcache.GetDeveloperFromCache.cachehit is false) and (isPreflight == false)</Condition>
            </Step>
            <!-- This assign message policy get response format if _format queryparam present in request and sets to Accept header while sending to backend.-->
            <Step>
                <Name>HPX_GetResponseFormatFromQueryParam</Name>
                <Condition>((request.queryparam._format != "") and (request.queryparam._format != null))  and (isPreflight == false)</Condition>
            </Step>
            <!-- This AssignMessage policy removes  '_format' query param from request URL.-->
            <Step>
                <Name>HPX_RemoveFormatQueryParam</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This AssignMessage policy set ACcept header to "application/json" if not set and '_format' is also null.-->
            <Step>
                <Name>HPX_SetAcceptHeader</Name>
                <Condition>(((request.header.Accept = null) or (request.header.Accept = "") or (request.header.Accept = "*/*")) and (!(proxy.pathsuffix ~~ ".*Binary.*")) and (isPreflight == false))</Condition>
            </Step>
        </Request>
        <Response>
            <!-- This ServiceCallout policy calls the Connector API of respective server for GET requests.-->
            <Step>
                <Name>HPX_Servicecallout.InvokeGETB2B</Name>
                <Condition>(request.verb="GET") and (isBasePath == true)</Condition>
            </Step>
            <Step>
                <Name>HPX_Servicecallout.InvokeGET</Name>
                <Condition>(request.verb="GET") and (isBasePath == false)</Condition>
            </Step>
            <!-- This ServiceCallout policy calls the Connector API of respective server for POST_Search requests.-->
            <Step>
                <Name>HPX_Servicecallout.InvokePOSTSearch</Name>
                <Condition>(request.verb = "POST" ) and (path MatchesPath "/_search") and (isBasePath == false)</Condition>
            </Step>
            <!-- This ServiceCallout policy calls the Connector API of respective server for POST requests.-->
            <Step>
                <Name>HPX_Servicecallout.InvokePOST</Name>
                <Condition>(request.verb = "POST") and (((!(path MatchesPath "/_search")) and (isBasePath == false)) or (isBasePath == true))</Condition>
            </Step>
            <!-- This ServiceCallout policy calls the connector API of respective server for PUT requests. -->
            <Step>
                <Name>HPX_Servicecallout.InvokePUT</Name>
                <Condition>(request.verb = "PUT")</Condition>
            </Step>
            <!-- This ServiceCallout policy calls the Connector API of respective server for DELETE requests.-->
            <Step>
                <Name>HPX_Servicecallout.InvokeDELETE</Name>
                <Condition>(request.verb="DELETE") and (isBasePath == false)</Condition>
            </Step>
            <!-- This ServiceCallout policy calls the Connector API of respective server for OPTIONS requests.-->
            <!--<Step>
                <Name>HPX_ServiceCallout.InvokeOPTIONS</Name>
                <Condition>(request.verb="OPTIONS") and (isPreflight == false) and (isBasePath == true)</Condition>
            </Step>-->
            <!-- This will excute if there is no response from server. -->
            <Step>
                <Name>HPX_RaiseFault_Generic</Name>
                <Condition>(conformanceResponse != "true") and(invokeConnectorAPIResponse == null) and (isPreflight == false)</Condition>
            </Step>
            <!-- This policy used to return access control headers for cross-origin request.-->
            <Step>
                <Name>HPX_CORSSupport</Name>
                <Condition>isPreflight == false</Condition>
            </Step>
            <!-- This JavaScriptCallout policy replaces the server specific URLS with proxy URL.-->
            <Step>
                <Name>HPX_ReplaceInternalProxyLinkURLs</Name>
                <Condition>(invokeConnectorAPIResponse != null) and (response.status.code == 200 or response.status.code == 201) and (isPreflight == false)</Condition>
            </Step>
            <!--This AssignMessage policy removes request headers from response. -->
            <Step>
                <Name>HPX_RemoveRequestHeader</Name>
            </Step>
        </Response>
    </PreFlow>
    <Flows>
        <Flow name="Patient">
            <Description/>
            <Request>
                <!-- This ExtractVariable policy extracts the following variables: primaryResource, primaryresourceId, versionID, subResource, subResourceId.-->
                <Step>
                    <Name>HPX_ExtractPrimaryResourceTypeAndId</Name>
                </Step>
                <!-- Replace Invalid ID with Valid ID -->
                <Step>
                    <Name>HPX_ReplacePatientIdLiteral</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(primaryResource == "Patient") and (isPreflight == false)</Condition>
        </Flow>
        <Flow name="conformance_metadata">
            <Description/>
            <Request>
                <!-- These AssignMessage policies creates the conformance response payload.  -->
                <Step>
                    <Name>HPX_Conformance_XML</Name>
                    <Condition>(request.header.Accept == "xml") or (request.header.Accept == "XML") or (request.header.Accept == "text/xml") or (request.header.Accept == "application/xml") or (request.header.Accept == "application/xml+fhir") or (request.header.Accept == "application/xml+fhir;charset=UTF-8")</Condition>
                </Step>
                <Step>
                    <Name>HPX_Conformance_JSON</Name>
                    <Condition>(request.header.Accept != "xml") and (request.header.Accept != "XML") and (request.header.Accept != "text/xml") and (request.header.Accept != "application/xml") and (request.header.Accept != "application/xml+fhir") and (request.header.Accept != "application/xml+fhir;charset=UTF-8")</Condition>
                </Step>
            </Request>
            <Response/>
            <Condition>(((proxy.pathsuffix MatchesPath "/metadata") and (request.verb = "GET")) or ((proxy.pathsuffix MatchesPath "/") and (request.verb = "OPTIONS")) ) and (isBasePath == true)</Condition>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <Step>
                <Name>HPX_SetLogsData</Name>
            </Step>
        </Response>
    </PostFlow>
    <PostClientFlow>
        <Request/>
        <Response>
            <Step>
                <Name>HPX_LogMessage</Name>
            </Step>
        </Response>
    </PostClientFlow>
    <HTTPProxyConnection>
        <BasePath>/fhir/v1</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default"/>
</ProxyEndpoint>